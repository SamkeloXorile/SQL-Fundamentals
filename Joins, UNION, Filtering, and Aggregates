1. Retrieve all employees and their assigned projects using an INNER JOIN. 
o Return: EmployeeID, FirstName, LastName, Department, Salary, ProjectID, ProjectName, Budget, Status. 
SELECT EmployeeID,
       Firstname,
       Last_name,
       Department,
       Salary,
       ProjectID,
       ProjectName,
       Budget,
       Status
FROM Employees AS A
INNER JOIN Projects AS B
ON A.EmployeeID = B.EmployeeID;

2. Retrieve all employees and their assigned projects, including employees who 
have no projects using a LEFT JOIN. 
o Return: EmployeeID, FirstName, LastName, Department, Salary, ProjectID, ProjectName, Budget, Status. 
SELECT EmployeeID,
       Firstname,
       Last_name,
       Department,
       Salary,
       ProjectID,
       ProjectName,
       Budget,
       Status
FROM Employees AS A
LEFT JOIN Projects AS B
ON A.EmployeeID = B.EmployeeID;

3. Retrieve all projects and their assigned employees, including projects that have no employees using a RIGHT JOIN. 
o Return: ProjectID, ProjectName, Budget, Status, EmployeeID, FirstName, LastName, Department, Salary. 
SELECT EmployeeID,
       Firstname,
       Last_name,
       Department,
       Salary,
       ProjectID,
       ProjectName,
       Budget,
       Status
FROM Employees AS A
RIGHT JOIN Projects AS B
ON A.EmployeeID = B.EmployeeID;

4. Retrieve all employees and projects, including those without a match in either table using a FULL OUTER JOIN. 
o Return: EmployeeID, FirstName, LastName, Department, Salary, ProjectID, ProjectName, Budget, Status. 
SELECT EmployeeID,
       Firstname,
       Last_name,
       Department,
       Salary,
       ProjectID,
       ProjectName,
       Budget,
       Status
FROM Employees AS A
FULL OUTER JOIN Projects AS B
ON A.EmployeeID = B.EmployeeID;SELECT EmployeeID,

5. Retrieve a list of all unique cities where employees are located and project statuses. 
o Return: Location (Rename the column to Location using an alias). 
SELECT City AS Location
FROM Employees 
UNION
SELECT Status AS location 
FROM Projects;

6. Retrieve a list of all cities where employees are located and project statuses, allowing duplicates. 
o Return: Location (Rename the column to Location using an alias). 
SELECT City AS Location
FROM Employees 
UNION ALL
SELECT Status AS location 
FROM Projects;

7. Retrieve employees who earn more than 70,000. 
o Return: EmployeeID, FirstName, LastName, Department, Salary. 
SELECT EmployeeID,
       Firstname,
       Last_name,
       Department,
       Salary
FROM Employees
WHERE Salary >70000;

8. Retrieve employees working in either IT or Finance departments. 
o Return: EmployeeID, FirstName, LastName, Department, Salary. 
SELECT EmployeeID,
       Firstname,
       Last_name,
       Department,
       Salary
FROM Employees
WHERE Department='IT' OR Department='Finance'

9. Retrieve projects that are not yet completed. 
o Return: ProjectID, ProjectName, Budget, Status. 
SELECT ProjectID,
       ProjectName,
       Budget,
       Status
FROM Projects
WHERE Status= 'Ongoing' AND Status= 'Pending';

10. Retrieve projects that have a budget greater than 70,000 and are not completed. 
• Return: ProjectID, ProjectName, Budget, Status.
SELECT ProjectID,
       ProjectName,
       Budget,
       Status
FROM Projects 
WHERE Budget >70000 AND Status= 'Ongoing'AND Status= 'Pending';

11. Retrieve employees from New York OR Toronto, ordered by salary in descending order. 
• Return: EmployeeID, FirstName, LastName, Department, Salary, City. 
SELECT EmployeeID,
       Firstname,
       Last_name,
       Department,
       Salary,
       City
FROM  Employees 
WHERE City= 'New York' OR  City= 'Toronto'
ORDER BY Salary DESC;

12. Retrieve the top 3 highest-paid employees. 
• Return: EmployeeID, FirstName, LastName, Department, Salary. 
SELECT EmployeeID,
       Firstname,
       Last_name,
       Department,
       Salary,
FROM  Employees 
ORDER BY Salary DESC
LIMIT 3;

13. Find the total salary per department, sorted in descending order. 
• Return: Department, TotalSalary (Rename SUM(Salary) as TotalSalary). 
SELECT Department,
       SUM (Salary) AS Total_Salary
FROM Employees 
GROUP BY Department 
ORDER BY SUM(Salary) DESC;

14. Find the average salary per city, but only include cities where the average salary is greater than 65,000. 
• Return: City, AverageSalary (Rename AVG(Salary) as AverageSalary). 
SELECT City,
       AVG (Salary) AS Average_Salary
FROM Employees 
GROUP BY City
HAVING AVG(Salary) 

15. Count the number of employees per department, including only departments with more than 1 employee. 
• Return: Department, EmployeeCount (Rename COUNT(EmployeeID) as EmployeeCount). 
SELECT Department,
       COUNT (EmployeeID) AS EmployeeCount
FROM Employees 
GROUP BY Department;

16. Retrieve the number of projects per status, but only include statuses with at least 2 projects. 
• Return: Status, ProjectCount (Rename COUNT(ProjectID) as ProjectCount). 
SELECT Status,
       Count (ProjectID) AS ProjectCount
FROM Projects
GROUP BY ALL;

17. Retrieve the total project budget per employee, but only for employees who are managing projects worth more than 150,000. 
• Return: EmployeeID, FirstName, LastName, TotalProjectBudget (Rename SUM(Budget) as TotalProjectBudget). 
SELECT EmployeeID,
       Firstname,
       Last_name,
       SUM (Budget) AS TotalProjectBudget
FROM Employees AS A
INNER JOIN Projects AS B 
ON A.EmployeedID = B.EmployeeID
GROUP BY ALL
HAVING SUM (Budget) >150000

---Exercise 5
